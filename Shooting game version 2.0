package shootinggame;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class ShootingGame extends Frame implements Runnable {
    private enum GameState {
        PLAYING,
        GAME_OVER,
        LEVEL_COMPLETE
    }

    private GameState gameState = GameState.PLAYING;

    private Player player;
    private List<Bullet> bullets;
    private List<Target> targets;
    private int score;
    private int level;
    private Random random;

    public ShootingGame() {
        initializeGame();
        setupUI();
        new Thread(this).start();
    }

    private void initializeGame() {
        setSize(800, 600);
        setTitle("Shooting Game");
        setBackground(Color.GRAY);
        player = new Player(400, 500);
        bullets = new ArrayList<>();
        targets = new ArrayList<>();
        score = 0;
        level = 1;
        random = new Random();
        spawnTargets();
    }

    private void setupUI() {
        setVisible(true);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                System.exit(0);
            }
        });

        addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                if (gameState == GameState.PLAYING) {
                    int key = e.getKeyCode();
                    if (key == KeyEvent.VK_LEFT) {
                        player.moveLeft();
                    } else if (key == KeyEvent.VK_RIGHT) {
                        player.moveRight(getWidth());
                    } else if (key == KeyEvent.VK_SPACE) {
                        bullets.add(new Bullet(player.getX() + 20, player.getY()));
                    }
                }
            }
        });
    }

    private void spawnTargets() {
        targets.clear();
        int numTargets = level + 4;
        int targetWidth = 50;
        int targetHeight = 50;
        int startY = 50;
        int maxX = getWidth() - targetWidth;
        for (int i = 0; i < numTargets; i++) {
            int x = i * 150 % maxX + 50;
            int y = startY + random.nextInt(100);
            targets.add(new Target(x, y, targetWidth, targetHeight));
        }
    }

    public void run() {
        while (true) {
            if (gameState == GameState.PLAYING) {
                updateGame();
                repaint();
            }
            try {
                Thread.sleep(16); // ~60 FPS
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void updateGame() {
        // Move bullets
        for (Bullet bullet : new ArrayList<>(bullets)) {
            bullet.move();
            if (bullet.getY() < 0) {
                bullets.remove(bullet);
            }
        }

        // Move targets
        for (Target target : targets) {
            target.move(getWidth());
        }

        // Check for collisions
        for (Bullet bullet : new ArrayList<>(bullets)) {
            for (Target target : new ArrayList<>(targets)) {
                if (bullet.intersects(target)) {
                    bullets.remove(bullet);
                    targets.remove(target);
                    score += 10;
                }
            }
        }

        // Check for game over or level up
        if (targets.isEmpty()) {
            level++;
            if (level <= 10) {
                spawnTargets();
            } else {
                gameState = GameState.LEVEL_COMPLETE;
            }
        }

        // Decrease health if targets reach the bottom
        for (Target target : new ArrayList<>(targets)) {
            if (target.getY() >= player.getY()) {
                targets.remove(target);
            }
        }

        // Check for game over
        if (targets.stream().anyMatch(target -> target.getY() >= player.getY())) {
            gameState = GameState.GAME_OVER;
        }
    }

    public void paint(Graphics g) {
        super.paint(g);
        g.setColor(Color.WHITE);
        g.drawString("Score: " + score, 10, 50);
        g.drawString("Level: " + level, 10, 70);

        player.draw(g);
        for (Bullet bullet : bullets) {
            bullet.draw(g);
        }
        for (Target target : targets) {
            target.draw(g);
        }

        if (gameState == GameState.GAME_OVER) {
            g.setColor(Color.RED);
            g.drawString("Game Over!", 350, 300);
        } else if (gameState == GameState.LEVEL_COMPLETE) {
            g.setColor(Color.GREEN);
            g.drawString("Level Complete!", 350, 300);
        }
    }

    public static void main(String[] args) {
        new ShootingGame();
    }
}

class Player {
    private int x, y;
    private int speed = 10;

    public Player(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public void moveLeft() {
        x -= speed;
        if (x < 0) {
            x = 0;
        }
    }

    public void moveRight(int screenWidth) {
        x += speed;
        if (x > screenWidth - 50) {
            x = screenWidth - 50;
        }
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public void draw(Graphics g) {
        g.setColor(Color.BLUE);
        g.fillRect(x, y, 50, 10);
    }
}

class Bullet {
    private int x, y;
    private int speed = 5;
    private int width = 5;
    private int height = 10;

    public Bullet(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public void move() {
        y -= speed;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public void draw(Graphics g) {
        g.setColor(Color.WHITE);
        g.fillRect(x, y, width, height);
    }

    public boolean intersects(Target target) {
        Rectangle bulletRect = new Rectangle(x, y, width, height);
        Rectangle targetRect = new Rectangle(target.getX(), target.getY(), target.getWidth(), target.getHeight());
        return bulletRect.intersects(targetRect);
    }
}

class Target {
    private int x, y;
    private int width, height;
    private int speed = 1;

    public Target(int x, int y, int width, int height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public int getWidth() {
        return width;
    }

    public int getHeight() {
        return height;
    }

    public void move(int screenWidth) {
        if (x <= 0 || x >= screenWidth - width) {
            speed = -speed;
        }
        x += speed;
    }

    public void draw(Graphics g) {
        g.setColor(Color.RED);
        g.fillRect(x, y, width, height);
    }
}
